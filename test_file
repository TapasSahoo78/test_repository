To use `async/await` in your `processShiftHistoryList` function, you need to make the function itself `async`. Additionally, since `RiderModel.find` returns a promise, you can `await` it to get the result. Here's a modified version of your code:

```javascript
static async processShiftHistoryList(shiftHistoryList, MyRiderDetails) {
  return await Promise.all(shiftHistoryList.map(async (shiftHistory) => {
    const passingDate = shiftHistory.shiftDate;
    const fromTimeStr = shiftHistory.shiftTimeId?.delivery_time_id?.fromTime;
    const cancelTimeStr = shiftHistory.shiftTimeId?.delivery_time_id?.toTime;

    const timeDifferenceInMinutes = 80;

    const userId = MyRiderDetails._id.toString();
    const targetDate = new Date('2023-12-29');
    const startTime = new Date('2023-12-29T12:00:00.000Z');
    const endTime = new Date('2023-12-29T23:59:00.000Z');

    try {
      const result = await RiderModel.find({
        userId: userId,
        loginTimes: {
          $elemMatch: {
            $gte: startTime,
            $lt: endTime
          }
        },
        logoutTimes: {
          $elemMatch: {
            $gte: startTime,
            $lt: endTime
          }
        }
      }).exec();

      console.log("result-------------", result);

      if (result.length > 0) {
        let totalDuration = 0;

        result.forEach(doc => {
          doc.loginTimes.forEach(loginTime => {
            doc.logoutTimes.forEach(logoutTime => {
              if (loginTime >= startTime && logoutTime < endTime) {
                totalDuration += logoutTime - loginTime;
              }
            });
          });
        });

        console.log('Total time spent between 9:00 and 15:00 on 29-12-2023:', totalDuration);
      } else {
        console.log('No records found for the specified date and time range.');
      }
    } catch (error) {
      console.error('Error querying MongoDB:', error);
    }

    const hoursDifference = Math.floor(timeDifferenceInMinutes / 60);
    const minutesDifference = timeDifferenceInMinutes % 60;

    shiftHistory.dutyTime = hoursDifference + ":" + minutesDifference;

    return shiftHistory;
  }));
}
```

This code makes the `processShiftHistoryList` function `async` and uses `await` to handle the promise returned by `RiderModel.find`. Also, it utilizes `Promise.all` to handle multiple asynchronous operations concurrently. Make sure to adjust error handling based on your requirements.