const currentDate = new Date();
    const todayDate = dateFns.format(currentDate, "yyyy-MM-dd");
    // return res.status(200).json({
    //   currentDate
    // });

    // Calculate the start and end of the current week ======
    const startOfWeekDate = dateFns.startOfWeek(currentDate, { weekStartsOn: 1 });
    const endOfWeekDate = dateFns.endOfWeek(currentDate, { weekStartsOn: 1 });

    // ======================= this week =======================
    var thisWeek = [];
    // Iterate through the days of the week and push them into the array
    let currentDay = startOfWeekDate;

    while (currentDay <= endOfWeekDate) {
      let dateAndDay = {};
      dateAndDay.date = dateFns.format(currentDay, "yyyy-MM-dd");
      // Format the date to get the day name (e.g., "Monday", "Tuesday", etc.)
      // 'EEEE' represents the full day name
      let dayname = (dateAndDay.dayName = dateFns.format(currentDay, "EEEE"));

      let query = ShiftTimesModel.find({
        shift_day: dayname,
        isActive: true,
        isDeleted: false,
      });
      query = query.populate({
        path: "delivery_time_id",
        match: {
          isActive: true,
          isDeleted: false,
        },
        select: "shiftBreakUp fromTime toTime totalHours lateNightCharge",
      });

      // Execute the query with 'lean' option to get plain JavaScript objects
      let shiftTimes = await query.lean().exec();

      // Calculate the 'shiftOverStatus' based on current time and shift times
      shiftTimes = await Promise.all(
        shiftTimes.map(async (shift) => {
          const currentTime = new Date();
          // const fromTime = new Date(shift.delivery_time_id.fromTime);
          // const toTime = new Date(shift.delivery_time_id.toTime);
          const fromTimeParts = shift.delivery_time_id.fromTime.split(":");
          const toTimeParts = shift.delivery_time_id.toTime.split(":");

          const fromTime = dateFns.setHours(
            dateFns.setMinutes(new Date(), fromTimeParts[1]),
            fromTimeParts[0]
          );

          const toTime = dateFns.setHours(
            dateFns.setMinutes(new Date(), toTimeParts[1]),
            toTimeParts[0]
          );
          // returns true or false
          // shift.delivery_time_id.shiftOverStatus = currentTime > fromTime;

          // checks whether shift history is available or not
          let shiftHistoryExists = await super.getByCustomOptionsSingle(
            req,
            ShiftHistoryModel,
            {
              riderId: req.rider,
              shiftTimeId: shift._id,
              shiftDate: dateFns.format(currentDay, "yyyy-MM-dd"),

              cancelTime: null,
            }
          );

          // threeInOneStat ====> 0->ShiftOver, 1->AddBtn, 2->CancelBtn 5->Remove Prev Day
          shift.delivery_time_id.threeInOneStat = "1";
          // shift.delivery_time_id = {};
          if (shiftHistoryExists != null) {
            // shiftHistory available
            if (currentTime > toTime) {
              // shift endTime is over
              shift.delivery_time_id.threeInOneStat = "0";
              // shift.delivery_time_id = {};
            }
            shift.delivery_time_id.threeInOneStat = "2";
            // shift.delivery_time_id.threeInOneStat = "5555555555555";  //Todat Modified ---> 31.12.2024
          } else {
            if (
              dateFns.format(currentDay, "yyyy-MM-dd") <
              dateFns.format(currentTime, "yyyy-MM-dd")
            ) {
              shift.delivery_time_id.threeInOneStat = "5555555555555";
            }

            // shiftHistory NOT-available
            if (
              dateFns.format(currentDay, "yyyy-MM-dd") ==
              dateFns.format(currentTime, "yyyy-MM-dd")
            ) {
              // if loopingDate is todayDate
              if (currentTime > toTime) {
                // currentTime is more than shiftEndTime
                shift.delivery_time_id.threeInOneStat = "0";
                // shift.delivery_time_id = {};
              } else {
                // currentTime is less than shiftEndTime
                shift.delivery_time_id.threeInOneStat = "1";
              }
            }
          }

          // important
          return shift;
        })
      );

      if (shiftTimes.length > 0) {
        dateAndDay.shiftTimes = shiftTimes;
      } else {
        dateAndDay.shiftTimes = [];
      }

      thisWeek.push(dateAndDay);
      // increase the day by 1
      currentDay = dateFns.addDays(currentDay, 1);
    }

    // thisWeek now doesnot contain items where (threeInOneStat = 0 for currentDate)
    // =================================================
    thisWeek = thisWeek.filter((day) => {
      // Check if the date is not equal to the current date and threeInOneStat is not 0
      return day.date !== todayDate ||
        day.shiftTimes.some(
          (shift) => shift.delivery_time_id.threeInOneStat !== '0'
        );
    });

    // Filter the array to remove objects with threeInOneStat equal to 0
    thisWeek.forEach((day) => {
      day.shiftTimes = day.shiftTimes.filter((shift) => shift.delivery_time_id.threeInOneStat !== "5555555555555");
    });

    // To remove days with no shifts, you can filter them out like this:
    thisWeek = thisWeek.filter((day) => day.shiftTimes.length > 0);

     return res.status(200).json({
       thisWeek
     });
