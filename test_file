Certainly, if you want to remove today and the previous day from the `thisWeek` list, you can adjust the filtering logic. Here's how you can modify the code:

```javascript
// Filter out today and previous day from the thisWeek list
thisWeek = thisWeek.filter((day) => {
  // Check if the date is not equal to today or yesterday
  return day.date !== todayDate && dateFns.isAfter(day.date, dateFns.subDays(currentDate, 1)) &&
    day.shiftTimes.some((shift) => shift.delivery_time_id.threeInOneStat !== '0');
});

// Filter the array to remove objects with threeInOneStat equal to 0 or "5555555555555"
thisWeek.forEach((day) => {
  day.shiftTimes = day.shiftTimes.filter((shift) => shift.delivery_time_id.threeInOneStat !== "0" && shift.delivery_time_id.threeInOneStat !== "5555555555555");
});

// To remove days with no shifts, you can filter them out like this:
thisWeek = thisWeek.filter((day) => day.shiftTimes.length > 0);

return res.status(200).json({
  thisWeek
});
```

This modification checks that the date is not equal to today or yesterday, and it also filters out shifts with `threeInOneStat` equal to "0" or "5555555555555". Adjust this based on your specific requirements.