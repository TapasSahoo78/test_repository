Certainly, here are a few optimizations and suggestions for your code:

1. **Async/Await**: Consider using `Promise.all` to parallelize the execution of multiple asynchronous operations instead of using `await` inside the `map` function.

2. **Use Date Functions Directly**: You can simplify the code by using date functions directly instead of creating new Date objects.

3. **Remove Redundant Conditions**: Some conditions appear redundant and could be simplified for better readability.

4. **Consistent Variable Naming**: Ensure consistency in variable naming conventions.

Here's an optimized version incorporating these suggestions:

```javascript
const currentDate = new Date();
const todayDate = dateFns.format(currentDate, "yyyy-MM-dd");

const startOfWeekDate = dateFns.startOfWeek(currentDate, { weekStartsOn: 1 });
const endOfWeekDate = dateFns.endOfWeek(currentDate, { weekStartsOn: 1 });

const thisWeek = [];

for (let currentDay = startOfWeekDate; currentDay <= endOfWeekDate; currentDay = dateFns.addDays(currentDay, 1)) {
  const dateAndDay = {
    date: dateFns.format(currentDay, "yyyy-MM-dd"),
    dayName: dateFns.format(currentDay, "EEEE"),
    shiftTimes: [],
  };

  const query = ShiftTimesModel.find({
    shift_day: dateAndDay.dayName,
    isActive: true,
    isDeleted: false,
  }).populate({
    path: "delivery_time_id",
    match: {
      isActive: true,
      isDeleted: false,
    },
    select: "shiftBreakUp fromTime toTime totalHours lateNightCharge",
  });

  const shiftTimes = await query.lean().exec();

  dateAndDay.shiftTimes = await Promise.all(shiftTimes.map(async (shift) => {
    const currentTime = new Date();
    const [fromHour, fromMinute] = shift.delivery_time_id.fromTime.split(":");
    const [toHour, toMinute] = shift.delivery_time_id.toTime.split(":");

    const fromTime = dateFns.setHours(dateFns.setMinutes(currentDate, fromMinute), fromHour);
    const toTime = dateFns.setHours(dateFns.setMinutes(currentDate, toMinute), toHour);

    let threeInOneStat = "1";

    const shiftHistoryExists = await super.getByCustomOptionsSingle(req, ShiftHistoryModel, {
      riderId: req.rider,
      shiftTimeId: shift._id,
      shiftDate: dateFns.format(currentDay, "yyyy-MM-dd"),
      cancelTime: null,
    });

    if (shiftHistoryExists !== null) {
      threeInOneStat = currentTime > toTime ? "0" : "2";
    } else {
      if (dateFns.isBefore(currentDay, currentDate)) {
        threeInOneStat = "5555555555555";
      }

      if (dateFns.isEqual(currentDay, currentDate)) {
        threeInOneStat = currentTime > toTime ? "0" : "1";
      }
    }

    shift.delivery_time_id.threeInOneStat = threeInOneStat;
    return shift;
  }));

  if (dateAndDay.shiftTimes.length > 0) {
    thisWeek.push(dateAndDay);
  }
}

thisWeek = thisWeek.filter((day) => day.date !== todayDate || day.shiftTimes.some((shift) => shift.delivery_time_id.threeInOneStat !== '0'));

thisWeek.forEach((day) => {
  day.shiftTimes = day.shiftTimes.filter((shift) => shift.delivery_time_id.threeInOneStat !== "5555555555555");
});

thisWeek = thisWeek.filter((day) => day.shiftTimes.length > 0);

return res.status(200).json({ thisWeek });
```

This version aims for improved readability and performance. Feel free to adapt it based on your specific requirements and coding style.