  static processShiftHistoryList(shiftHistoryList, MyRiderDetails) {
    return shiftHistoryList.map((shiftHistory) => {
      const passingDate = shiftHistory.shiftDate;
      const fromTimeStr = shiftHistory.shiftTimeId?.delivery_time_id?.fromTime;
      // const cancelTimeStr = shiftHistory.cancelTime || shiftHistory.shiftTimeId?.delivery_time_id?.toTime;
      const cancelTimeStr = shiftHistory.shiftTimeId?.delivery_time_id?.toTime;

      // const timeDifferenceInMinutes = this.calculateTimeDifference(MyRiderDetails, fromTimeStr, cancelTimeStr);

      const timeDifferenceInMinutes = 80;

      //====================================================================================================
      const userId = MyRiderDetails._id.toString(); // Replace with the actual user ID
      const targetDate = new Date('2023-12-29');
      const startTime = new Date('2023-12-29T12:00:00.000Z');
      const endTime = new Date('2023-12-29T23:59:00.000Z');
      const result = RiderModel.find({
        userId: userId,
        loginTimes: {
          $elemMatch: {
            $gte: startTime,
            $lt: endTime
          }
        },
        logoutTimes: {
          $elemMatch: {
            $gte: startTime,
            $lt: endTime
          }
        }
      }).exec();
      console.log("result-------------",result);
      if (result.length > 0) {
        let totalDuration = 0;

        result.forEach(doc => {
          doc.loginTimes.forEach(loginTime => {
            doc.logoutTimes.forEach(logoutTime => {
              if (loginTime >= startTime && logoutTime < endTime) {
                totalDuration += logoutTime - loginTime;
              }
            });
          });
        });

        console.log('Total time spent between 9:00 and 15:00 on 29-12-2023:', totalDuration);
      } else {
        console.log('No records found for the specified date and time range.');
      }

      //====================================================================================================

      // const timeDifferenceInMinutes = calculateDailyTime(MyRiderDetails, fromTimeStr, cancelTimeStr);

      const hoursDifference = Math.floor(timeDifferenceInMinutes / 60);
      const minutesDifference = timeDifferenceInMinutes % 60;

      shiftHistory.dutyTime = hoursDifference + ":" + minutesDifference;

      return shiftHistory;
    });
  }
